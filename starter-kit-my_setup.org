* My customizations
** MISC
Load some smaler packages which do not need a lot of customization
*** Golden Ratio
#+BEGIN_SRC emacs-lisp
(starter-kit-install-if-needed 'golden-ratio)
(require 'golden-ratio)
(golden-ratio-mode 1)
#+END_SRC

*** Undo-tree
#+BEGIN_SRC emacs-lisp
(starter-kit-install-if-needed 'undo-tree)
(global-undo-tree-mode)
#+END_SRC

*** Neo Tree
#+BEGIN_SRC emacs-lisp
(starter-kit-install-if-needed 'neotree)
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)
#+END_SRC

** HELM
Dependency check
#+BEGIN_SRC emacs-lisp
(starter-kit-install-if-needed 'helm)
#+END_SRC
 
The customizations are mainl taken from
 [[http://tuhdo.github.io/helm-intro.html]]

*** Customization according to tutorial (cf. link above)
 Configure some global customization and overwrite default keybidings
 #+BEGIN_SRC emacs-lisp
   (require 'helm)
   (require 'helm-config)


   ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
   ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
   ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
   (global-set-key (kbd "C-c h") 'helm-command-prefix)
   (global-unset-key (kbd "C-x c"))

   (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
   (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
   (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

   (when (executable-find "curl")
     (setq helm-google-suggest-use-curl-p t))

   (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
         helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
         helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
         helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
         helm-ff-file-name-history-use-recentf t
         helm-echo-input-in-header-line t)


   (defun spacemacs//helm-hide-minibuffer-maybe ()
     "Hide minibuffer in Helm session if we use the header line as input field."
     (when (with-helm-buffer helm-echo-input-in-header-line)
       (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
         (overlay-put ov 'window (selected-window))
         (overlay-put ov 'face
                      (let ((bg-color (face-background 'default nil)))
                        `(:background ,bg-color :foreground ,bg-color)))
         (setq-local cursor-type nil))))
 #+END_SRC

*** Minibuffer visuals
 Take care of minibuffer and resizing
 #+BEGIN_SRC emacs-lisp

   (add-hook 'helm-minibuffer-set-up-hook
             'spacemacs//helm-hide-minibuffer-maybe)

   (setq helm-autoresize-max-height 0)
   (setq helm-autoresize-min-height 20)
   (helm-autoresize-mode 1)

   (helm-mode 1)

   (helm-autoresize-mode t)

   ;; (defun pl/helm-alive-p ()
   ;;   (if (boundp 'helm-alive-p)
   ;;       (symbol-value 'helm-alive-p)))

   ;; (add-to-list 'golden-ratio-inhibit-functions 'pl/helm-alive-p)


 #+END_SRC

*** M-x
 Use helm-M-x instead of standard M-X and allow fuzzy matching
 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-x") 'helm-M-x)
   (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

 #+END_SRC

*** M-y
 Use helm for accessing the kill-ring
 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-y") 'helm-show-kill-ring)
 #+END_SRC

*** C-x b
 Use helm to switch buffers
 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x b") 'helm-mini)
   (setq helm-buffers-fuzzy-matching t
         helm-recentf-fuzzy-match    t)
 #+END_SRC

*** C-f C-f
 Use helm-find-files instead of standard C-x C-f
 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x C-f") 'helm-find-files)

 #+END_SRC



** Org Mode

*** Starter Kit Org
  Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

  Org-mode is for keeping notes, maintaining ToDo lists, doing project
  planning, and authoring with a fast and effective plain-text system.
  Org Mode can be used as a very simple folding outliner or as a complex
  GTD system or tool for reproducible research and literate programming.

  For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
  which is also *implemented using* Org-mode and [[http://git-scm.com/][git]].

**** Org-Mode Hook -- Keybindings
     :PROPERTIES:
     :CUSTOM_ID: keybindings
     :END:
  #+begin_src emacs-lisp
    (add-hook 'org-mode-hook
              (lambda ()
                (local-set-key "\M-\C-n" 'outline-next-visible-heading)
                (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
                (local-set-key "\M-\C-u" 'outline-up-heading)
                ;; table
                (local-set-key "\M-\C-w" 'org-table-copy-region)
                (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
                (local-set-key "\M-\C-l" 'org-table-sort-lines)
                ;; display images
                (local-set-key "\M-I" 'org-toggle-iimage-in-org)))
  #+end_src

**** Speed keys
     :PROPERTIES:
     :CUSTOM_ID: speed-keys
     :END:
  Speed commands enable single-letter commands in Org-mode files when
  the point is at the beginning of a headline, or at the beginning of a
  code block.

  See the `=org-speed-commands-default=' variable for a list of the keys
  and commands enabled at the beginning of headlines.  All code blocks
  are available at the beginning of a code block, the following key
  sequence =C-c C-v h= (bound to `=org-babel-describe-bindings=') will
  display a list of the code blocks commands and their related keys.

  #+begin_src emacs-lisp
    (setq org-use-speed-commands t)
  #+end_src


*** Capture templates
 Capture templates for TODO tasks, notes, projects, etx

 #+BEGIN_SRC emacs-lisp
   (setq org-capture-templates
         (quote (("t" "todo" entry (file "~david/Dropbox/org/refile.org")
                  "* TODO %^{Brief Description} %^g\n%?\nAdded: %U" )
                 ("j" "Journal" entry (file+datetree "~david/Dropbox/org/refile.org")
                  "* %?\n%U\n" :clock-in t :clock-resume t)
                 ("h" "Habit" entry (file "~david/Dropbox/org/refile.org")
                  "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))

 #+END_SRC

*** ToDo Keywords
 TODO keywords are defined on a per file basis in the agenda files. The
 following code enables coloring for easier readability

 #+BEGIN_SRC emacs-lisp
   (setq org-todo-keyword-faces
       (quote (("TODO" :foreground "red" :weight bold)
                 ("NEXT" :foreground "orange" :weight bold)
                 ("DONE" :foreground "forest green" :weight bold)
                 ("PROJ" :foreground "blue" :weight bold)
                 ("WAITING" :foreground "orange" :weight bold)
                 ("CANCELLED" :foreground "forest green" :weight bold))))

 #+END_SRC

*** Tags

*** Agenda Settings

 Org Agenda files. This setting is system specific and must be entered
 on every system separately:

 #+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (quote ("~david/Dropbox/org")))
 #+END_SRC

 Custom Agenda settings
 #+BEGIN_SRC emacs-lisp 
    (setq org-agenda-custom-commands
      (quote
       (("n" "Agenda and all TODOs"
         ((agenda "" nil)
          (alltodo "" nil))
         nil)
        (" " "Agenda and NEXT Actions"
         ((agenda ""
	          ((org-agenda-overriding-header "Agenda")))
          (todo "NEXT"
	        ((org-agenda-overriding-header "Next Actions"))))
         nil nil)
        ("w" "Refile" tags "REFILE" nil)
        ("r" "Reading List" tags-todo "+CATEGORY=\"Read\"" nil)
        ("P" "Projects list" todo "PROJ"
         ((org-agenda-overriding-header "Projects List"))))))
 #+END_SRC

*** Refiling
 #+BEGIN_SRC emacs-lisp
   ;; ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
   (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                    (org-agenda-files :maxlevel . 9))))

   ; Use full outline paths for refile targets - we file directly with IDO
   (setq org-refile-use-outline-path t)

   ; Targets complete directly with IDO
   (setq org-outline-path-complete-in-steps nil)

   ; Allow refile to create parent tasks with confirmation
   (setq org-refile-allow-creating-parent-nodes (quote confirm))

   ; Use the current window for indirect buffer display
   (setq org-indirect-buffer-display 'current-window)

 #+END_SRC


*** Babel
**** Code blocks
     :PROPERTIES:
     :CUSTOM_ID: babel
     :END:
  This activates a number of widely used languages, you are encouraged
  to activate more languages using the customize interface for the
  `=org-babel-load-languages=' variable, or with an elisp form like the
  one below.  The customize interface of `=org-babel-load-languages='
  contains an up to date list of the currently supported languages.
  #+begin_src emacs-lisp :tangle no
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (r .t)
       (python . t)
       (sh . t)))
  #+end_src

  You are encouraged to add the following to your personal configuration
  although it is not added by default as a security precaution.
  #+begin_src emacs-lisp :tangle no
    (setq org-confirm-babel-evaluate nil)
  #+end_src

**** Code block fontification
     :PROPERTIES:
     :CUSTOM_ID: code-block-fontification
     :END:
  The following displays the contents of code blocks in Org-mode files
  using the major-mode of the code.  It also changes the behavior of
  =TAB= to as if it were used in the appropriate major mode.  This means
  that reading and editing code form inside of your Org-mode files is
  much more like reading and editing of code using its major mode.
  #+begin_src emacs-lisp
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
  #+end_src

**** The Library of Babel
     :PROPERTIES:
     :CUSTOM_ID: library-of-babel
     :END:
  The library of babel contains makes many useful functions available
  for use by code blocks in *any* emacs file.  See the actual
  =library-of-babel.org= (located in the Org-mode =contrib/babel=
  directory) file for information on the functions, and see
  [[http://orgmode.org/worg/org-contrib/babel/intro.php#library-of-babel][worg:library-of-babel]] for more usage information.

  Code blocks can be loaded into the library of babel from any Org-mode
  file using the `org-babel-lob-ingest' function.

